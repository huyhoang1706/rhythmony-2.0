// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: proto/artist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArtistAPI_GetArtistById_FullMethodName      = "/rhythmony.metadata.ArtistAPI/GetArtistById"
	ArtistAPI_ListSeveralArtists_FullMethodName = "/rhythmony.metadata.ArtistAPI/ListSeveralArtists"
)

// ArtistAPIClient is the client API for ArtistAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtistAPIClient interface {
	GetArtistById(ctx context.Context, in *GetArtistRequest, opts ...grpc.CallOption) (*GetArtistResponse, error)
	ListSeveralArtists(ctx context.Context, in *ListSeveralArtistsRequest, opts ...grpc.CallOption) (*ListSeveralArtistsResp, error)
}

type artistAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewArtistAPIClient(cc grpc.ClientConnInterface) ArtistAPIClient {
	return &artistAPIClient{cc}
}

func (c *artistAPIClient) GetArtistById(ctx context.Context, in *GetArtistRequest, opts ...grpc.CallOption) (*GetArtistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArtistResponse)
	err := c.cc.Invoke(ctx, ArtistAPI_GetArtistById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistAPIClient) ListSeveralArtists(ctx context.Context, in *ListSeveralArtistsRequest, opts ...grpc.CallOption) (*ListSeveralArtistsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSeveralArtistsResp)
	err := c.cc.Invoke(ctx, ArtistAPI_ListSeveralArtists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtistAPIServer is the server API for ArtistAPI service.
// All implementations must embed UnimplementedArtistAPIServer
// for forward compatibility.
type ArtistAPIServer interface {
	GetArtistById(context.Context, *GetArtistRequest) (*GetArtistResponse, error)
	ListSeveralArtists(context.Context, *ListSeveralArtistsRequest) (*ListSeveralArtistsResp, error)
	mustEmbedUnimplementedArtistAPIServer()
}

// UnimplementedArtistAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArtistAPIServer struct{}

func (UnimplementedArtistAPIServer) GetArtistById(context.Context, *GetArtistRequest) (*GetArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistById not implemented")
}
func (UnimplementedArtistAPIServer) ListSeveralArtists(context.Context, *ListSeveralArtistsRequest) (*ListSeveralArtistsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeveralArtists not implemented")
}
func (UnimplementedArtistAPIServer) mustEmbedUnimplementedArtistAPIServer() {}
func (UnimplementedArtistAPIServer) testEmbeddedByValue()                   {}

// UnsafeArtistAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtistAPIServer will
// result in compilation errors.
type UnsafeArtistAPIServer interface {
	mustEmbedUnimplementedArtistAPIServer()
}

func RegisterArtistAPIServer(s grpc.ServiceRegistrar, srv ArtistAPIServer) {
	// If the following call pancis, it indicates UnimplementedArtistAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArtistAPI_ServiceDesc, srv)
}

func _ArtistAPI_GetArtistById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistAPIServer).GetArtistById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistAPI_GetArtistById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistAPIServer).GetArtistById(ctx, req.(*GetArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistAPI_ListSeveralArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeveralArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistAPIServer).ListSeveralArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistAPI_ListSeveralArtists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistAPIServer).ListSeveralArtists(ctx, req.(*ListSeveralArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtistAPI_ServiceDesc is the grpc.ServiceDesc for ArtistAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtistAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rhythmony.metadata.ArtistAPI",
	HandlerType: (*ArtistAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtistById",
			Handler:    _ArtistAPI_GetArtistById_Handler,
		},
		{
			MethodName: "ListSeveralArtists",
			Handler:    _ArtistAPI_ListSeveralArtists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/artist.proto",
}
