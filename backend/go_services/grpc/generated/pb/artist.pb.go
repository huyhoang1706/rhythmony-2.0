// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.2
// source: artist.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetArtistRequest) Reset() {
	*x = GetArtistRequest{}
	mi := &file_artist_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistRequest) ProtoMessage() {}

func (x *GetArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistRequest.ProtoReflect.Descriptor instead.
func (*GetArtistRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{0}
}

func (x *GetArtistRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetArtistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artist *Artist `protobuf:"bytes,1,opt,name=artist,proto3" json:"artist,omitempty"`
}

func (x *GetArtistResponse) Reset() {
	*x = GetArtistResponse{}
	mi := &file_artist_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArtistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtistResponse) ProtoMessage() {}

func (x *GetArtistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtistResponse.ProtoReflect.Descriptor instead.
func (*GetArtistResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{1}
}

func (x *GetArtistResponse) GetArtist() *Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

type ListSeveralArtistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize uint64 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNo   uint64 `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
}

func (x *ListSeveralArtistsRequest) Reset() {
	*x = ListSeveralArtistsRequest{}
	mi := &file_artist_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSeveralArtistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeveralArtistsRequest) ProtoMessage() {}

func (x *ListSeveralArtistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeveralArtistsRequest.ProtoReflect.Descriptor instead.
func (*ListSeveralArtistsRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{2}
}

func (x *ListSeveralArtistsRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSeveralArtistsRequest) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

type ListSeveralArtistsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize      uint64    `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNo        uint64    `protobuf:"varint,2,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	TotalPages    uint64    `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	TotalElements uint64    `protobuf:"varint,4,opt,name=total_elements,json=totalElements,proto3" json:"total_elements,omitempty"`
	Artists       []*Artist `protobuf:"bytes,5,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *ListSeveralArtistsResp) Reset() {
	*x = ListSeveralArtistsResp{}
	mi := &file_artist_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSeveralArtistsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeveralArtistsResp) ProtoMessage() {}

func (x *ListSeveralArtistsResp) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeveralArtistsResp.ProtoReflect.Descriptor instead.
func (*ListSeveralArtistsResp) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{3}
}

func (x *ListSeveralArtistsResp) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSeveralArtistsResp) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListSeveralArtistsResp) GetTotalPages() uint64 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *ListSeveralArtistsResp) GetTotalElements() uint64 {
	if x != nil {
		return x.TotalElements
	}
	return 0
}

func (x *ListSeveralArtistsResp) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type CreateArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Bio  string `protobuf:"bytes,2,opt,name=bio,proto3" json:"bio,omitempty"`
}

func (x *CreateArtistRequest) Reset() {
	*x = CreateArtistRequest{}
	mi := &file_artist_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtistRequest) ProtoMessage() {}

func (x *CreateArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtistRequest.ProtoReflect.Descriptor instead.
func (*CreateArtistRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{4}
}

func (x *CreateArtistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateArtistRequest) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

type CreateArtistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artist  *Artist `protobuf:"bytes,1,opt,name=artist,proto3" json:"artist,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateArtistResponse) Reset() {
	*x = CreateArtistResponse{}
	mi := &file_artist_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateArtistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtistResponse) ProtoMessage() {}

func (x *CreateArtistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtistResponse.ProtoReflect.Descriptor instead.
func (*CreateArtistResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{5}
}

func (x *CreateArtistResponse) GetArtist() *Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

func (x *CreateArtistResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bio  string `protobuf:"bytes,3,opt,name=bio,proto3" json:"bio,omitempty"`
}

func (x *UpdateArtistRequest) Reset() {
	*x = UpdateArtistRequest{}
	mi := &file_artist_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArtistRequest) ProtoMessage() {}

func (x *UpdateArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArtistRequest.ProtoReflect.Descriptor instead.
func (*UpdateArtistRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateArtistRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateArtistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateArtistRequest) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

type UpdateArtistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artist  *Artist `protobuf:"bytes,1,opt,name=artist,proto3" json:"artist,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateArtistResponse) Reset() {
	*x = UpdateArtistResponse{}
	mi := &file_artist_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateArtistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArtistResponse) ProtoMessage() {}

func (x *UpdateArtistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArtistResponse.ProtoReflect.Descriptor instead.
func (*UpdateArtistResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateArtistResponse) GetArtist() *Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

func (x *UpdateArtistResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteArtistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteArtistRequest) Reset() {
	*x = DeleteArtistRequest{}
	mi := &file_artist_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteArtistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArtistRequest) ProtoMessage() {}

func (x *DeleteArtistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArtistRequest.ProtoReflect.Descriptor instead.
func (*DeleteArtistRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteArtistRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteArtistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteArtistResponse) Reset() {
	*x = DeleteArtistResponse{}
	mi := &file_artist_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteArtistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArtistResponse) ProtoMessage() {}

func (x *DeleteArtistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArtistResponse.ProtoReflect.Descriptor instead.
func (*DeleteArtistResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteArtistResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListArtistsByAlbumIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlbumId string `protobuf:"bytes,1,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
}

func (x *ListArtistsByAlbumIdRequest) Reset() {
	*x = ListArtistsByAlbumIdRequest{}
	mi := &file_artist_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtistsByAlbumIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtistsByAlbumIdRequest) ProtoMessage() {}

func (x *ListArtistsByAlbumIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtistsByAlbumIdRequest.ProtoReflect.Descriptor instead.
func (*ListArtistsByAlbumIdRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{10}
}

func (x *ListArtistsByAlbumIdRequest) GetAlbumId() string {
	if x != nil {
		return x.AlbumId
	}
	return ""
}

type ListArtistsByAlbumIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*Artist `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *ListArtistsByAlbumIdResponse) Reset() {
	*x = ListArtistsByAlbumIdResponse{}
	mi := &file_artist_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtistsByAlbumIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtistsByAlbumIdResponse) ProtoMessage() {}

func (x *ListArtistsByAlbumIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtistsByAlbumIdResponse.ProtoReflect.Descriptor instead.
func (*ListArtistsByAlbumIdResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{11}
}

func (x *ListArtistsByAlbumIdResponse) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type ListArtistsByTrackIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId string `protobuf:"bytes,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
}

func (x *ListArtistsByTrackIdRequest) Reset() {
	*x = ListArtistsByTrackIdRequest{}
	mi := &file_artist_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtistsByTrackIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtistsByTrackIdRequest) ProtoMessage() {}

func (x *ListArtistsByTrackIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtistsByTrackIdRequest.ProtoReflect.Descriptor instead.
func (*ListArtistsByTrackIdRequest) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{12}
}

func (x *ListArtistsByTrackIdRequest) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

type ListArtistsByTrackIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artist []*Artist `protobuf:"bytes,1,rep,name=artist,proto3" json:"artist,omitempty"`
}

func (x *ListArtistsByTrackIdResponse) Reset() {
	*x = ListArtistsByTrackIdResponse{}
	mi := &file_artist_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtistsByTrackIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtistsByTrackIdResponse) ProtoMessage() {}

func (x *ListArtistsByTrackIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artist_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtistsByTrackIdResponse.ProtoReflect.Descriptor instead.
func (*ListArtistsByTrackIdResponse) Descriptor() ([]byte, []int) {
	return file_artist_proto_rawDescGZIP(), []int{13}
}

func (x *ListArtistsByTrackIdResponse) GetArtist() []*Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

var File_artist_proto protoreflect.FileDescriptor

var file_artist_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d,
	0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x22, 0xcc,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68,
	0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0x3b, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x22, 0x64, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x06,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x4b, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x22, 0x64, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e,
	0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x62,
	0x75, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d,
	0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f,
	0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x32, 0xf9, 0x05, 0x0a, 0x09, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49, 0x12, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x72, 0x68, 0x79, 0x74,
	0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x72,
	0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x68,
	0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d,
	0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x72, 0x68, 0x79,
	0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e,
	0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f,
	0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x79, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42,
	0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68,
	0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x68, 0x79, 0x74,
	0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x2f, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x32, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x68,
	0x79, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x62, 0x42, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x03, 0x70, 0x62, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_artist_proto_rawDescOnce sync.Once
	file_artist_proto_rawDescData = file_artist_proto_rawDesc
)

func file_artist_proto_rawDescGZIP() []byte {
	file_artist_proto_rawDescOnce.Do(func() {
		file_artist_proto_rawDescData = protoimpl.X.CompressGZIP(file_artist_proto_rawDescData)
	})
	return file_artist_proto_rawDescData
}

var file_artist_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_artist_proto_goTypes = []any{
	(*GetArtistRequest)(nil),             // 0: rhythmony.metadata.GetArtistRequest
	(*GetArtistResponse)(nil),            // 1: rhythmony.metadata.GetArtistResponse
	(*ListSeveralArtistsRequest)(nil),    // 2: rhythmony.metadata.ListSeveralArtistsRequest
	(*ListSeveralArtistsResp)(nil),       // 3: rhythmony.metadata.ListSeveralArtistsResp
	(*CreateArtistRequest)(nil),          // 4: rhythmony.metadata.CreateArtistRequest
	(*CreateArtistResponse)(nil),         // 5: rhythmony.metadata.CreateArtistResponse
	(*UpdateArtistRequest)(nil),          // 6: rhythmony.metadata.UpdateArtistRequest
	(*UpdateArtistResponse)(nil),         // 7: rhythmony.metadata.UpdateArtistResponse
	(*DeleteArtistRequest)(nil),          // 8: rhythmony.metadata.DeleteArtistRequest
	(*DeleteArtistResponse)(nil),         // 9: rhythmony.metadata.DeleteArtistResponse
	(*ListArtistsByAlbumIdRequest)(nil),  // 10: rhythmony.metadata.ListArtistsByAlbumIdRequest
	(*ListArtistsByAlbumIdResponse)(nil), // 11: rhythmony.metadata.ListArtistsByAlbumIdResponse
	(*ListArtistsByTrackIdRequest)(nil),  // 12: rhythmony.metadata.ListArtistsByTrackIdRequest
	(*ListArtistsByTrackIdResponse)(nil), // 13: rhythmony.metadata.ListArtistsByTrackIdResponse
	(*Artist)(nil),                       // 14: rhythmony.metadata.Artist
}
var file_artist_proto_depIdxs = []int32{
	14, // 0: rhythmony.metadata.GetArtistResponse.artist:type_name -> rhythmony.metadata.Artist
	14, // 1: rhythmony.metadata.ListSeveralArtistsResp.artists:type_name -> rhythmony.metadata.Artist
	14, // 2: rhythmony.metadata.CreateArtistResponse.artist:type_name -> rhythmony.metadata.Artist
	14, // 3: rhythmony.metadata.UpdateArtistResponse.artist:type_name -> rhythmony.metadata.Artist
	14, // 4: rhythmony.metadata.ListArtistsByAlbumIdResponse.artists:type_name -> rhythmony.metadata.Artist
	14, // 5: rhythmony.metadata.ListArtistsByTrackIdResponse.artist:type_name -> rhythmony.metadata.Artist
	0,  // 6: rhythmony.metadata.ArtistAPI.GetArtistById:input_type -> rhythmony.metadata.GetArtistRequest
	2,  // 7: rhythmony.metadata.ArtistAPI.ListSeveralArtists:input_type -> rhythmony.metadata.ListSeveralArtistsRequest
	4,  // 8: rhythmony.metadata.ArtistAPI.CreateArtist:input_type -> rhythmony.metadata.CreateArtistRequest
	6,  // 9: rhythmony.metadata.ArtistAPI.UpdateArtist:input_type -> rhythmony.metadata.UpdateArtistRequest
	8,  // 10: rhythmony.metadata.ArtistAPI.DeleteArtist:input_type -> rhythmony.metadata.DeleteArtistRequest
	10, // 11: rhythmony.metadata.ArtistAPI.ListArtistsByAlbumId:input_type -> rhythmony.metadata.ListArtistsByAlbumIdRequest
	12, // 12: rhythmony.metadata.ArtistAPI.ListArtistsByTrackId:input_type -> rhythmony.metadata.ListArtistsByTrackIdRequest
	1,  // 13: rhythmony.metadata.ArtistAPI.GetArtistById:output_type -> rhythmony.metadata.GetArtistResponse
	3,  // 14: rhythmony.metadata.ArtistAPI.ListSeveralArtists:output_type -> rhythmony.metadata.ListSeveralArtistsResp
	5,  // 15: rhythmony.metadata.ArtistAPI.CreateArtist:output_type -> rhythmony.metadata.CreateArtistResponse
	7,  // 16: rhythmony.metadata.ArtistAPI.UpdateArtist:output_type -> rhythmony.metadata.UpdateArtistResponse
	9,  // 17: rhythmony.metadata.ArtistAPI.DeleteArtist:output_type -> rhythmony.metadata.DeleteArtistResponse
	11, // 18: rhythmony.metadata.ArtistAPI.ListArtistsByAlbumId:output_type -> rhythmony.metadata.ListArtistsByAlbumIdResponse
	13, // 19: rhythmony.metadata.ArtistAPI.ListArtistsByTrackId:output_type -> rhythmony.metadata.ListArtistsByTrackIdResponse
	13, // [13:20] is the sub-list for method output_type
	6,  // [6:13] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_artist_proto_init() }
func file_artist_proto_init() {
	if File_artist_proto != nil {
		return
	}
	file_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artist_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_artist_proto_goTypes,
		DependencyIndexes: file_artist_proto_depIdxs,
		MessageInfos:      file_artist_proto_msgTypes,
	}.Build()
	File_artist_proto = out.File
	file_artist_proto_rawDesc = nil
	file_artist_proto_goTypes = nil
	file_artist_proto_depIdxs = nil
}
