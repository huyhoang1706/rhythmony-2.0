// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: album.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AlbumAPI_GetAlbumById_FullMethodName      = "/rhythmony.metadata.AlbumAPI/GetAlbumById"
	AlbumAPI_ListSeveralAlbums_FullMethodName = "/rhythmony.metadata.AlbumAPI/ListSeveralAlbums"
	AlbumAPI_CreateAlbum_FullMethodName       = "/rhythmony.metadata.AlbumAPI/CreateAlbum"
	AlbumAPI_UpdateAlbum_FullMethodName       = "/rhythmony.metadata.AlbumAPI/UpdateAlbum"
	AlbumAPI_DeleteAlbum_FullMethodName       = "/rhythmony.metadata.AlbumAPI/DeleteAlbum"
)

// AlbumAPIClient is the client API for AlbumAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumAPIClient interface {
	GetAlbumById(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumResponse, error)
	ListSeveralAlbums(ctx context.Context, in *ListSeveralAlbumsRequest, opts ...grpc.CallOption) (*ListSeveralAlbumsResponse, error)
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumResponse, error)
	UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*UpdateAlbumResponse, error)
	DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumResponse, error)
}

type albumAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumAPIClient(cc grpc.ClientConnInterface) AlbumAPIClient {
	return &albumAPIClient{cc}
}

func (c *albumAPIClient) GetAlbumById(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlbumResponse)
	err := c.cc.Invoke(ctx, AlbumAPI_GetAlbumById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumAPIClient) ListSeveralAlbums(ctx context.Context, in *ListSeveralAlbumsRequest, opts ...grpc.CallOption) (*ListSeveralAlbumsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSeveralAlbumsResponse)
	err := c.cc.Invoke(ctx, AlbumAPI_ListSeveralAlbums_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumAPIClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAlbumResponse)
	err := c.cc.Invoke(ctx, AlbumAPI_CreateAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumAPIClient) UpdateAlbum(ctx context.Context, in *UpdateAlbumRequest, opts ...grpc.CallOption) (*UpdateAlbumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAlbumResponse)
	err := c.cc.Invoke(ctx, AlbumAPI_UpdateAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumAPIClient) DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAlbumResponse)
	err := c.cc.Invoke(ctx, AlbumAPI_DeleteAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumAPIServer is the server API for AlbumAPI service.
// All implementations must embed UnimplementedAlbumAPIServer
// for forward compatibility.
type AlbumAPIServer interface {
	GetAlbumById(context.Context, *GetAlbumRequest) (*GetAlbumResponse, error)
	ListSeveralAlbums(context.Context, *ListSeveralAlbumsRequest) (*ListSeveralAlbumsResponse, error)
	CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumResponse, error)
	UpdateAlbum(context.Context, *UpdateAlbumRequest) (*UpdateAlbumResponse, error)
	DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumResponse, error)
	mustEmbedUnimplementedAlbumAPIServer()
}

// UnimplementedAlbumAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlbumAPIServer struct{}

func (UnimplementedAlbumAPIServer) GetAlbumById(context.Context, *GetAlbumRequest) (*GetAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumById not implemented")
}
func (UnimplementedAlbumAPIServer) ListSeveralAlbums(context.Context, *ListSeveralAlbumsRequest) (*ListSeveralAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeveralAlbums not implemented")
}
func (UnimplementedAlbumAPIServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedAlbumAPIServer) UpdateAlbum(context.Context, *UpdateAlbumRequest) (*UpdateAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbum not implemented")
}
func (UnimplementedAlbumAPIServer) DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedAlbumAPIServer) mustEmbedUnimplementedAlbumAPIServer() {}
func (UnimplementedAlbumAPIServer) testEmbeddedByValue()                  {}

// UnsafeAlbumAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumAPIServer will
// result in compilation errors.
type UnsafeAlbumAPIServer interface {
	mustEmbedUnimplementedAlbumAPIServer()
}

func RegisterAlbumAPIServer(s grpc.ServiceRegistrar, srv AlbumAPIServer) {
	// If the following call pancis, it indicates UnimplementedAlbumAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AlbumAPI_ServiceDesc, srv)
}

func _AlbumAPI_GetAlbumById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumAPIServer).GetAlbumById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumAPI_GetAlbumById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumAPIServer).GetAlbumById(ctx, req.(*GetAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumAPI_ListSeveralAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeveralAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumAPIServer).ListSeveralAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumAPI_ListSeveralAlbums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumAPIServer).ListSeveralAlbums(ctx, req.(*ListSeveralAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumAPI_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumAPIServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumAPI_CreateAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumAPIServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumAPI_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumAPIServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumAPI_UpdateAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumAPIServer).UpdateAlbum(ctx, req.(*UpdateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumAPI_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumAPIServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumAPI_DeleteAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumAPIServer).DeleteAlbum(ctx, req.(*DeleteAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumAPI_ServiceDesc is the grpc.ServiceDesc for AlbumAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rhythmony.metadata.AlbumAPI",
	HandlerType: (*AlbumAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlbumById",
			Handler:    _AlbumAPI_GetAlbumById_Handler,
		},
		{
			MethodName: "ListSeveralAlbums",
			Handler:    _AlbumAPI_ListSeveralAlbums_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _AlbumAPI_CreateAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _AlbumAPI_UpdateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _AlbumAPI_DeleteAlbum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "album.proto",
}
