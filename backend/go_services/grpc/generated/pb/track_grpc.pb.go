// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: track.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrackAPI_GetTrackById_FullMethodName                = "/rhythmony.metadata.TrackAPI/GetTrackById"
	TrackAPI_ListSeveralTracks_FullMethodName           = "/rhythmony.metadata.TrackAPI/ListSeveralTracks"
	TrackAPI_CreateTrack_FullMethodName                 = "/rhythmony.metadata.TrackAPI/CreateTrack"
	TrackAPI_UpdateTrack_FullMethodName                 = "/rhythmony.metadata.TrackAPI/UpdateTrack"
	TrackAPI_DeleteTrack_FullMethodName                 = "/rhythmony.metadata.TrackAPI/DeleteTrack"
	TrackAPI_ListTracksByAlbumId_FullMethodName         = "/rhythmony.metadata.TrackAPI/ListTracksByAlbumId"
	TrackAPI_ListSeveralTracksByArtistId_FullMethodName = "/rhythmony.metadata.TrackAPI/ListSeveralTracksByArtistId"
)

// TrackAPIClient is the client API for TrackAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackAPIClient interface {
	GetTrackById(ctx context.Context, in *GetTrackByIdRequest, opts ...grpc.CallOption) (*GetTrackByIdResponse, error)
	ListSeveralTracks(ctx context.Context, in *ListSeveralTracksRequest, opts ...grpc.CallOption) (*ListSeveralTracksResponse, error)
	CreateTrack(ctx context.Context, in *CreateTrackRequest, opts ...grpc.CallOption) (*CreateTrackResponse, error)
	UpdateTrack(ctx context.Context, in *UpdateTrackRequest, opts ...grpc.CallOption) (*UpdateTrackResponse, error)
	DeleteTrack(ctx context.Context, in *DeleteTrackRequest, opts ...grpc.CallOption) (*DeleteTrackResponse, error)
	ListTracksByAlbumId(ctx context.Context, in *ListTracksByAlbumIdRequest, opts ...grpc.CallOption) (*ListTracksByAlbumIdResponse, error)
	ListSeveralTracksByArtistId(ctx context.Context, in *ListSeveralTracksByArtistIdRequest, opts ...grpc.CallOption) (*ListSeveralTracksByArtistIdResponse, error)
}

type trackAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackAPIClient(cc grpc.ClientConnInterface) TrackAPIClient {
	return &trackAPIClient{cc}
}

func (c *trackAPIClient) GetTrackById(ctx context.Context, in *GetTrackByIdRequest, opts ...grpc.CallOption) (*GetTrackByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrackByIdResponse)
	err := c.cc.Invoke(ctx, TrackAPI_GetTrackById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackAPIClient) ListSeveralTracks(ctx context.Context, in *ListSeveralTracksRequest, opts ...grpc.CallOption) (*ListSeveralTracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSeveralTracksResponse)
	err := c.cc.Invoke(ctx, TrackAPI_ListSeveralTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackAPIClient) CreateTrack(ctx context.Context, in *CreateTrackRequest, opts ...grpc.CallOption) (*CreateTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTrackResponse)
	err := c.cc.Invoke(ctx, TrackAPI_CreateTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackAPIClient) UpdateTrack(ctx context.Context, in *UpdateTrackRequest, opts ...grpc.CallOption) (*UpdateTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTrackResponse)
	err := c.cc.Invoke(ctx, TrackAPI_UpdateTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackAPIClient) DeleteTrack(ctx context.Context, in *DeleteTrackRequest, opts ...grpc.CallOption) (*DeleteTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTrackResponse)
	err := c.cc.Invoke(ctx, TrackAPI_DeleteTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackAPIClient) ListTracksByAlbumId(ctx context.Context, in *ListTracksByAlbumIdRequest, opts ...grpc.CallOption) (*ListTracksByAlbumIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTracksByAlbumIdResponse)
	err := c.cc.Invoke(ctx, TrackAPI_ListTracksByAlbumId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackAPIClient) ListSeveralTracksByArtistId(ctx context.Context, in *ListSeveralTracksByArtistIdRequest, opts ...grpc.CallOption) (*ListSeveralTracksByArtistIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSeveralTracksByArtistIdResponse)
	err := c.cc.Invoke(ctx, TrackAPI_ListSeveralTracksByArtistId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackAPIServer is the server API for TrackAPI service.
// All implementations must embed UnimplementedTrackAPIServer
// for forward compatibility.
type TrackAPIServer interface {
	GetTrackById(context.Context, *GetTrackByIdRequest) (*GetTrackByIdResponse, error)
	ListSeveralTracks(context.Context, *ListSeveralTracksRequest) (*ListSeveralTracksResponse, error)
	CreateTrack(context.Context, *CreateTrackRequest) (*CreateTrackResponse, error)
	UpdateTrack(context.Context, *UpdateTrackRequest) (*UpdateTrackResponse, error)
	DeleteTrack(context.Context, *DeleteTrackRequest) (*DeleteTrackResponse, error)
	ListTracksByAlbumId(context.Context, *ListTracksByAlbumIdRequest) (*ListTracksByAlbumIdResponse, error)
	ListSeveralTracksByArtistId(context.Context, *ListSeveralTracksByArtistIdRequest) (*ListSeveralTracksByArtistIdResponse, error)
	mustEmbedUnimplementedTrackAPIServer()
}

// UnimplementedTrackAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrackAPIServer struct{}

func (UnimplementedTrackAPIServer) GetTrackById(context.Context, *GetTrackByIdRequest) (*GetTrackByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrackById not implemented")
}
func (UnimplementedTrackAPIServer) ListSeveralTracks(context.Context, *ListSeveralTracksRequest) (*ListSeveralTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeveralTracks not implemented")
}
func (UnimplementedTrackAPIServer) CreateTrack(context.Context, *CreateTrackRequest) (*CreateTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrack not implemented")
}
func (UnimplementedTrackAPIServer) UpdateTrack(context.Context, *UpdateTrackRequest) (*UpdateTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrack not implemented")
}
func (UnimplementedTrackAPIServer) DeleteTrack(context.Context, *DeleteTrackRequest) (*DeleteTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrack not implemented")
}
func (UnimplementedTrackAPIServer) ListTracksByAlbumId(context.Context, *ListTracksByAlbumIdRequest) (*ListTracksByAlbumIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTracksByAlbumId not implemented")
}
func (UnimplementedTrackAPIServer) ListSeveralTracksByArtistId(context.Context, *ListSeveralTracksByArtistIdRequest) (*ListSeveralTracksByArtistIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeveralTracksByArtistId not implemented")
}
func (UnimplementedTrackAPIServer) mustEmbedUnimplementedTrackAPIServer() {}
func (UnimplementedTrackAPIServer) testEmbeddedByValue()                  {}

// UnsafeTrackAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackAPIServer will
// result in compilation errors.
type UnsafeTrackAPIServer interface {
	mustEmbedUnimplementedTrackAPIServer()
}

func RegisterTrackAPIServer(s grpc.ServiceRegistrar, srv TrackAPIServer) {
	// If the following call pancis, it indicates UnimplementedTrackAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrackAPI_ServiceDesc, srv)
}

func _TrackAPI_GetTrackById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackAPIServer).GetTrackById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackAPI_GetTrackById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackAPIServer).GetTrackById(ctx, req.(*GetTrackByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackAPI_ListSeveralTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeveralTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackAPIServer).ListSeveralTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackAPI_ListSeveralTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackAPIServer).ListSeveralTracks(ctx, req.(*ListSeveralTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackAPI_CreateTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackAPIServer).CreateTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackAPI_CreateTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackAPIServer).CreateTrack(ctx, req.(*CreateTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackAPI_UpdateTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackAPIServer).UpdateTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackAPI_UpdateTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackAPIServer).UpdateTrack(ctx, req.(*UpdateTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackAPI_DeleteTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackAPIServer).DeleteTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackAPI_DeleteTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackAPIServer).DeleteTrack(ctx, req.(*DeleteTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackAPI_ListTracksByAlbumId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTracksByAlbumIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackAPIServer).ListTracksByAlbumId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackAPI_ListTracksByAlbumId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackAPIServer).ListTracksByAlbumId(ctx, req.(*ListTracksByAlbumIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackAPI_ListSeveralTracksByArtistId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeveralTracksByArtistIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackAPIServer).ListSeveralTracksByArtistId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackAPI_ListSeveralTracksByArtistId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackAPIServer).ListSeveralTracksByArtistId(ctx, req.(*ListSeveralTracksByArtistIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackAPI_ServiceDesc is the grpc.ServiceDesc for TrackAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rhythmony.metadata.TrackAPI",
	HandlerType: (*TrackAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrackById",
			Handler:    _TrackAPI_GetTrackById_Handler,
		},
		{
			MethodName: "ListSeveralTracks",
			Handler:    _TrackAPI_ListSeveralTracks_Handler,
		},
		{
			MethodName: "CreateTrack",
			Handler:    _TrackAPI_CreateTrack_Handler,
		},
		{
			MethodName: "UpdateTrack",
			Handler:    _TrackAPI_UpdateTrack_Handler,
		},
		{
			MethodName: "DeleteTrack",
			Handler:    _TrackAPI_DeleteTrack_Handler,
		},
		{
			MethodName: "ListTracksByAlbumId",
			Handler:    _TrackAPI_ListTracksByAlbumId_Handler,
		},
		{
			MethodName: "ListSeveralTracksByArtistId",
			Handler:    _TrackAPI_ListSeveralTracksByArtistId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "track.proto",
}
