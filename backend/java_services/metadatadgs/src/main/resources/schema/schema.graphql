type Query {
    genres: [Genre!]!
    artists(pageSize: Int, pageNo: Int): [Artist]
    artist(id: String!): Artist
    albums(pageSize: Int, pageNo: Int): [Album]
    album(id: String!): Album
    tracks(pageSize: Int, pageNo: Int): [Track]
    track(id: String): Track
    getTracksByArtistId(artistId: String): [Track]
    getAlbumsByArtistId(artistId: String): [Album]
}

type Mutation {
    createArtist(artist: ArtistInput): Artist
    updateArtist(id: String!, artist: ArtistInput): Artist
    deleteArtist(id: String!): String
}

type Genre {
    name: String!
}

type Artist {
    id: String!
    name: String!
    bio: String
    type: String
    popularity: Int
    image: String
    genres: [String]
}

type Album {
    id: String!
    title: String!
    albumType: String
    type: String
    totalTracks: Int
    releaseDate: String
    image: String
    label: String
    popularity: Int
    genres: [String]
    artists: [Artist!]
    tracks: [Track!]
}

type Track {
    id: String!
    title: String!
    durationMs: Int
    explicit: Boolean
    type: String!
    lyrics: String
    popularity: Int
    audioUrl: String
    genres: [String]
    artists: [Artist!]
    albums: [Album!]
}

input ArtistInput {
    name: String!
    bio: String
    image: String
}